%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.5 (Build 18F132) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1016 175
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1016 175
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: JGQMXY+ArialMT
%!FontType1-1.0: JGQMXY+ArialMT 1.0000.5.0100
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin/FontName /JGQMXY+ArialMT def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /D put
dup 35 /E put
dup 36 /B put
dup 37 /A put
dup 38 /zero put
dup 39 /one put
dup 40 /s put
dup 41 /t put
dup 42 /a put
dup 43 /r put
dup 44 /e put
dup 45 /m put
dup 46 /i put
dup 47 /n put
dup 48 /l put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1361 1 index div -665 2 index div 4096 3 index div 2060 5 -1 roll div]cvx def
/sfnts [<













00>] def
/CharStrings 19 dict dup begin
/.notdef 0 def
/zero 1 def
/one 2 def
/A 3 def
/B 4 def
/C 5 def
/D 6 def
/E 7 def
/a 8 def
/e 9 def
/i 10 def
/l 11 def
/m 12 def
/n 13 def
/r 14 def
/s 15 def
/t 16 def
/acute 17 def
/glyph3380 18 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] def
/FontBBox{-1361 -665 4096 2060}def
/UniqueID 4167158 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF8582693491A2FA54E38FF421606F41F15594F07F865F909FE7990EC028684F89B0A24E822BAF31E7CC3C8F9602CCD6FB5E14C040606D60F5BAC95E033E33D144803E18FDE5B941C8EF32884D521EEF728E0B6E73DC2B176A161477B94FB44D4AC4E432E4AC6520108D0A1DC1D757895CECEBA20BDFD1A5A73D77B3B37160D4FDEBA8C1AB4AC202FC8FCC572FD5FD29EA26F77C1521DCEBB6ED0FDF6C2EA8F2B723BA13333F27729986F2F8CD9AE0B6E718308338F34DF6B7BB74D6922BB4BEFFDF4D428C9A9743C854A32FA738612C1D977896952FED06E23A92BF2E99EF3B91BA585B0D5665E5C65E0598ADE7FD6B26506856AC58AA1E85542A087FCC5B1334612E14C3703E58F9483DA28F2842F4ACEBA6F6EE08D533A8C7A2271080D08856BFE054C23EC811378349007CFFFD75B5E96F6BC46C3A0CC562332E80EBC534FCBBA7F1DD47D374C26C94150E0002CE9C7741E2CC422C38468596F7E03487BD0B5EC59AB3889BCB085A34DF5E0E941AA0D73CB63C881F8B876245D15435068F0EA0DEE79DC296F5F5F47B5651B42BCFED68D83CC2800CAB2ABDBBFDE1D5D0BC6F4F56091E98315C9FB721097511B779A4B83D06D94B662A7E1D905DCED3DAE05096E9DDC120630B6C2569FD4B5A1C927306106A824690A87F9F4A0FB2662843275C6AA49E2668C46EE22E7658AD014DA93353108C2299ABCD4130DD48CCF02BB6D3CD32192B2DF9D3764D09F9140E07786DDC384608C2D14164450C1E1C8C39F9842B28FE77AD0AA8126429FD38A7B7DB0F09C42BA41A01C
07AAC2E223B1FAEA6DA61043C9B334153C5C764F1CB1CA9940FD797CB8D1F303C5393463ACEFFE3DF76D71B878845CB7A9D2B6E57256BE1C8A84A9FCC6C037C51977F16865ACE9EC141931F0ABC24576A7B9BE96AF027A66B2F501C951577ECA2BE07359131853F0027CA551193370B2CF9A81514EDB2C43D6C2B5E2DBD1B9E417D02DB3631D3F14F8A2E0F6E3AE8206CA499DB8398A94EEED58C1FB453618D3589576B7790E679733F8BCC986487CEF5DD9498AE3999BB9E933E9DF8D738B766535979B694357F2F0F2135ECE60E81DF7F04DCD90FB48EAABA4B06EE6DCC54C6A6EB7BE1C72F6926C6F240EB1689E4ABBCB0EEB7E1CAC12BD7CC6E72DDCC981B35F8A92A287F56F3F2C832AC9CCCD96A72A154F5EC62A348A02F8D0A39D76794BB179B96560003EF8DC9506EBF01EC0823EBF5A1812F1196026F63239043A8874F7004C2DD0EC1AA592D2BEB044D7B898FE3C3A437AFBDA9881C4F9B336E9CBC99360CC43A0FCADC6E50080703A094584888FE5479A60B9673A2FE2BC39D8E69357AA5EE4ED6AE48E8E468C748F38D91DA4AF34683428713C778B0464456F5568A7ABF277BDF24B50F17AD39F21BBD0AB798830CEA3EBB546C1F9167C5A0ED4474466D212D205F636AA7F166479BB38FF9C112567D91C1A71CF904C8629B66ABEC5A0415FAE005EAFEBC7E240BB70F7A28F7292ABCD2CA43BC56D3C616138A4BC59D54F126FE76288425A3AFCF63DAF0F07B29CC812D3FA11C7EA6082EE9C64B802B14CF3AE4132998F877F5A311B37484C0A5CBF4F2BF8EFE14AC771AA804534A0FCB97B5ECA5A146E06F8510C5B44CFD10BCE3F5DD22C03012C1566541D09AF4D30108FA7DE42CCBBE59C768653E910A4C57EE5A3F2415DCAEC61E0305B8F311059C98221C4970BC30314A660F539CCC28B4C8C8063941CEE15ECC645D88982BE6E651612BF29639813802003CA3CE064B68F45FE351D4C9BD488718535FDD1652BAC2D53FC2252744D68AEBDDA70A1C44103B2D907452115C20530BD53DD44C9223EB16576A4F93A2B50E2761F01148F37955717EEE3F35EC70B49FADB986E6ADDAF2BC31D19C445C8586E25DAB487AC584321E2E71C95D189AAEA1483E57DB98A2168EC86C537204A35C16F9F6C9F4B6B8D731670A7EDF4BB363C566652D08CE1CCF65BD27AF012216776F2AB66DD65FDCE6FEB4C825816FB16DAEDF8A44B5F4A10B0F35852DA7A01B66158F4CB54ADA109E04F3D7C967D2BBB0ADC4351250756B5D3C09AC62689E7288D00FC8B9E5481E0911E2D69C7C974F1A84E89456DAB2396E09DDB4E2D432B8F56BC341EFCCD576BC0895B497C54DA04405D579E462A476B13DD70310B85BE0303790B81D2167D3A0F4C9FA1A40E306344E62FC98ABE15E0022347AE563EA5956B1D8BEA699AFEA1D5BEFB8B50967DB4D8465C7F
085283D6687139A7BD91098D1E8052F04906116602E3B85A89C214CAB44152804CDAB2CBE6205482EF4DCDAAC10821A208B8D14734D1C579D424ACBB5C6FFA29875102D6EA65488C504AF8F75E28611F192FCB82878F3A696432DDB27180177742F02BAC5C94EF02DBA9F618EE8F9ED04E9B3EB28E4F5DE26E1B37D519E7C7949D63ECC0DBEC7596CCDE11C7A55EE718953B070E549107A8B14F8F5A47531E5EFF6BD3FE8B58D41BE966D3DD16FDD240485D7226B4B12F369B6A0741A4BC2819B4E8873D981632AE3E4D26EBFDC0EB1515AEC9C06C03754C50428DECDB306F4AF533513CFDA1C0031FF28971512A61641ACEBAFC88D49F6369E398157DC8F41D69FEC51A83F17A3B612F35D2CA5614AD662DB90221AFBBDB48A596952CE3A2B65CB24C658567321E0A7E76C9F7ECCF3FFE95FBA5E97433FE9A8C4F20C8270AC28CA7A917D03D1D5AD1CE96A626C720139967978A258C8FED7DACFC2476F26641A926489F21AE071A3AA213994193F76812CE9DF6285264CDCF2D8E2384F3C9EDC715530F68D137CDED017DDE8ECB530DE2E47CEB6E753B7798728A4AFE545D24DA07A0DD1B53370F79AE17C755D3F71DDBEDFA768BD316F1CC25C37A9C8C244E74F268568E6ED778D66C5F86CB81207AB032FD184091B23FC4A528F9227AA26BADD3A3C4906CA7E2FBC39A8AD0AFBF3374E7D4713F88A79AFCB4512ABDA457CA5BDDD0F693A3A79E2CC6F561AA288C5B6304A11BBEED50E659C45D202F5764B170E62A18D7CD40E4EFA1DE3A3B7EAA4856144059EC72F2B812428E903E87D47492683F9FBE4839CBB627BB2E4C890C3A6E2A9700AF259EB2744E70C4F49A4066CA124943F347C4EDE29B2766C8902B05580F08B752962C9CE8EC08AB66B530D4EA0713DE917AC5F7B87CBE120F4F0468B159B60A1A01D8B931145E115F9EB3DFC03EAE911EAF8BB67D066155C25F5286181FB99C243DF18D34B960E48D58FA69C092103C70D951EF4BE274B9BD11D71459D82D800D703FCEECD66E73ECA0645ED135B584FB6E59B509EA9FE55E7AFEF07248F971E76A968DC73CC5E3A6DD3456871A642DBA7803546B50CB737A160738E213B54B5ACA8F14EEA0A525932B0C5B7150419358A6547AFDFBC49898163E813BD2A375CEB119E850D0858E6911BD6EA219E1AED955E0CC99698D2205514920EB32D70A622F1C5095A63D20CA5A721F92B7E9C04D6B523E497A421710DFA9AF6576D77A353B77E6D7985B8E8D1D46AF81B11E766E18BDF41A5724ADE10584C5C48935EB3D1B7B4F53E2AFECFFC0473B633AB3DE9F3CD2FEDA9FC7AC1F7A125996DB3E0BC8B6A7765E325D52A74206776775C7CC10F2009FED4E11784FADD22343AC99220DE14672793383C637132EA88BEFA2F0A0416EA5077D723ACD57CB37CB9E4779C8F1439E808C7995B8040CB5
4B4D9A0C0E6D74F62088B52D334E42A69CFEA31BC2247FFC66370C251E35B1DBE1C16D5BB86B977897101A9BB55E2614A14F144913F1797B9BDAC5E6C018D8517BB35223E353E45CDA814FE695509E18458BBF23D93C751740620745F3FDAF51489EA7B2B162DCB4E15D099F08351C3FD6F67B46870A2AC580B7F9F5FCE3CD5A6115DC3444317823C0834B31AA4DE1EA1B9110CDC8148548CB1FB0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/JGQMXY+ArialMT cguidfix
/F1.1/JGQMXY+ArialMT renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.96809894 0.9549647 0.9549647 sc
q
359 59 m
378.88226 59 395 75.117752 395 95 c
395 114.88225 378.88226 131 359 131 c
339.11774 131 323 114.88225 323 95 c
323 75.117752 339.11774 59 359 59 c
h
W*
0 0 1016 175 rc
318 136 m
400 136 l
400 54 l
318 54 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 1016 175 rc
1 0 0 -1 323 131 cm
36 72 m
55.882252 72 72 55.882252 72 36 c
72 16.117748 55.882252 0 36 0 c
16.117748 0 0 16.117748 0 36 c
0 55.882252 16.117748 72 36 72 c
h
S
Q
0.96809894 0.9549647 0.9549647 sc
q
508 59 m
527.88226 59 544 75.117752 544 95 c
544 114.88225 527.88226 131 508 131 c
488.11774 131 472 114.88225 472 95 c
472 75.117752 488.11774 59 508 59 c
h
W*
0 0 1016 175 rc
467 136 m
549 136 l
549 54 l
467 54 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 1016 175 rc
1 0 0 -1 472 131 cm
36 72 m
55.882252 72 72 55.882252 72 36 c
72 16.117748 55.882252 0 36 0 c
16.117748 0 0 16.117748 0 36 c
0 55.882252 16.117748 72 36 72 c
h
S
Q
0.96809894 0.9549647 0.9549647 sc
q
657 59 m
676.88226 59 693 75.117752 693 95 c
693 114.88225 676.88226 131 657 131 c
637.11774 131 621 114.88225 621 95 c
621 75.117752 637.11774 59 657 59 c
h
W*
0 0 1016 175 rc
616 136 m
698 136 l
698 54 l
616 54 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 1016 175 rc
1 0 0 -1 621 131 cm
36 72 m
55.882252 72 72 55.882252 72 36 c
72 16.117748 55.882252 0 36 0 c
16.117748 0 0 16.117748 0 36 c
0 55.882252 16.117748 72 36 72 c
h
S
Q
0.96809894 0.9549647 0.9549647 sc
q
210 59 m
229.88225 59 246 75.117752 246 95 c
246 114.88225 229.88225 131 210 131 c
190.11775 131 174 114.88225 174 95 c
174 75.117752 190.11775 59 210 59 c
h
W*
0 0 1016 175 rc
169 136 m
251 136 l
251 54 l
169 54 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 1016 175 rc
1 0 0 -1 174 131 cm
36 72 m
55.882252 72 72 55.882252 72 36 c
72 16.117748 55.882252 0 36 0 c
16.117748 0 0 16.117748 0 36 c
0 55.882252 16.117748 72 36 72 c
h
S
Q
0.96809894 0.9549647 0.9549647 sc
q
806 59 m
825.88226 59 842 75.117752 842 95 c
842 114.88225 825.88226 131 806 131 c
786.11774 131 770 114.88225 770 95 c
770 75.117752 786.11774 59 806 59 c
h
W*
0 0 1016 175 rc
765 136 m
847 136 l
847 54 l
765 54 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
0 0 1016 175 rc
1 0 0 -1 770 131 cm
36 72 m
55.882252 72 72 55.882252 72 36 c
72 16.117748 55.882252 0 36 0 c
16.117748 0 0 16.117748 0 36 c
0 55.882252 16.117748 72 36 72 c
h
S
0 0 0 sc
1 0 0 -1 493 117 cm
/F1.1[ 41 0 0 -41 0 0]sf
0 37 m
(!)s
1 0 0 -1 645 117 cm
0 37 m
(")s
1 0 0 -1 795 117 cm
0 37 m
(#)s
1 0 0 -1 344 117 cm
0 37 m
($)s
1 0 0 -1 198 117 cm
0 37 m
(%)s
Q
q
115.5 96.5 m
175.5 96.5 l
175.5 93.5 l
115.5 93.5 l
115.5 85.5 l
96.5 95 l
115.5 104.5 l
115.5 96.5 l
h
W
0 0 1016 175 rc
91.5 109.5 m
180.5 109.5 l
180.5 80.5 l
91.5 80.5 l
h
f
Q
q
900.5 93.5 m
840.5 93.5 l
840.5 96.5 l
900.5 96.5 l
900.5 104.5 l
919.5 95 l
900.5 85.5 l
900.5 93.5 l
h
W
0 0 1016 175 rc
835.5 109.5 m
924.5 109.5 l
924.5 80.5 l
835.5 80.5 l
h
f
Q
q
264.5 96.5 m
304.5 96.5 l
304.5 104.5 l
323.5 95 l
304.5 85.5 l
304.5 93.5 l
264.5 93.5 l
264.5 85.5 l
245.5 95 l
264.5 104.5 l
264.5 96.5 l
h
W
0 0 1016 175 rc
240.5 109.5 m
328.5 109.5 l
328.5 80.5 l
240.5 80.5 l
h
f
Q
q
413.5 96.5 m
453.5 96.5 l
453.5 104.5 l
472.5 95 l
453.5 85.5 l
453.5 93.5 l
413.5 93.5 l
413.5 85.5 l
394.5 95 l
413.5 104.5 l
413.5 96.5 l
h
W
0 0 1016 175 rc
389.5 109.5 m
477.5 109.5 l
477.5 80.5 l
389.5 80.5 l
h
f
Q
q
562.5 96.5 m
602.5 96.5 l
602.5 104.5 l
621.5 95 l
602.5 85.5 l
602.5 93.5 l
562.5 93.5 l
562.5 85.5 l
543.5 95 l
562.5 104.5 l
562.5 96.5 l
h
W
0 0 1016 175 rc
538.5 109.5 m
626.5 109.5 l
626.5 80.5 l
538.5 80.5 l
h
f
Q
q
711.5 96.5 m
751.5 96.5 l
751.5 104.5 l
770.5 95 l
751.5 85.5 l
751.5 93.5 l
711.5 93.5 l
711.5 85.5 l
692.5 95 l
711.5 104.5 l
711.5 96.5 l
h
W
0 0 1016 175 rc
687.5 109.5 m
775.5 109.5 l
775.5 80.5 l
687.5 80.5 l
h
f
Q
0 0 0 sc
q
0 0 1016 175 rc
1 0 0 -1 132 143 cm
/F1.1[ 28 0 0 -28 0 0]sf
0 25 m
(&)s
1 0 0 -1 280 143 cm
0 25 m
(&)s
1 0 0 -1 429 143 cm
0 25 m
(&)s
1 0 0 -1 578 143 cm
0 25 m
(&)s
1 0 0 -1 727 143 cm
0 25 m
(&)s
1 0 0 -1 873 143 cm
0 25 m
(')s
1 0 0 -1 481 46 cm
0.27246094 25 m
(\(\)*+\))[ 14.000000 7.779297 15.572266 9.324219 0.000000 ] xS
1 0 0 -1 897.5 46 cm
0.20703125 25 m
(\),+-./*0)[ 7.779297 15.572266 9.324219 23.324219 6.220703 15.572266 15.572266 0.000000 ] xS
1 0 0 -1 19 46 cm
0.20703125 25 m
(\),+-./*0)[ 7.779297 15.572266 9.324219 23.324219 6.220703 15.572266 15.572266 0.000000 ] xS
Q
0.847 0.847 0.847 sc
q
919 123 m
976 123 l
976 66 l
919 66 l
919 123 l
h
W*
0 0 1016 175 rc
919 123 m
976 123 l
976 66 l
919 66 l
919 123 l
h
f
Q
2 w
0.59200001 0.59200001 0.59200001 sc
q
919 123 m
976 123 l
976 66 l
919 66 l
919 123 l
h
W*
0 0 1016 175 rc
1 0 0 -1 919 123 cm
0 0 m
57 0 l
57 57 l
0 57 l
0 0 l
h
S
Q
0.847 0.847 0.847 sc
q
40 123 m
97 123 l
97 66 l
40 66 l
40 123 l
h
W*
0 0 1016 175 rc
40 123 m
97 123 l
97 66 l
40 66 l
40 123 l
h
f
Q
0.59200001 0.59200001 0.59200001 sc
q
40 123 m
97 123 l
97 66 l
40 66 l
40 123 l
h
W*
0 0 1016 175 rc
1 0 0 -1 40 123 cm
0 0 m
57 0 l
57 57 l
0 57 l
0 0 l
h
S
ep
end
