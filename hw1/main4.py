import mdptoolbox.example
import numpy as np
prob = np.zeros((2, 10, 10))
#if leave
prob[0] = [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
           [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
           [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]

#if roll
p=1.0/6
prob[1] = [[0, p, p, p, 0, 0, 0, 0, 0, 0.5],
           [0, 0, 0, 0, p, p, p, 0, 0, 0.5],
           [0, 0, 0, 0, 0, p, p, p, 0, 0.5],
           [0, 0, 0, 0, 0, 0, p, p, p, 0.5],
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
           [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
np.sum(prob[0],axis=1)
np.sum(prob[1],axis=1)

rewards = np.zeros((2, 10, 10))
# if leave
rewards[0] = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
#if roll
rewards[1] = [[0, 4, 5, 6, 0, 0, 0, 0, 0, 0],
              [0, 0, 0, 0, 4, 5, 6, 0, 0, -4],
              [0, 0, 0, 0, 0, 4, 5, 6, 0, -5],
              [0, 0, 0, 0, 0, 0, 4, 5, 6, -6],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, -8],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, -9],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, -10],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, -11],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, -12],
              [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]

vi = mdptoolbox.mdp.ValueIteration(prob, rewards, 1)
vi.run()

optimal_policy = vi.policy
expected_values = vi.V

print(optimal_policy)
print(expected_values)
